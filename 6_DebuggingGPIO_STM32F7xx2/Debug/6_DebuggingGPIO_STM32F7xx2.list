
6_DebuggingGPIO_STM32F7xx2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d8  080003e0  000103e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d8  080003d8  000103e0  2**0
                  CONTENTS
  4 .ARM          00000000  080003d8  080003d8  000103e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d8  080003e0  000103e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d8  080003d8  000103d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003dc  080003dc  000103dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003e0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003e0  00020020  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000103e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a28  00000000  00000000  0001040e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000033b  00000000  00000000  00010e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00011178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000080  00000000  00000000  00011230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a1c  00000000  00000000  000112b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000011ac  00000000  00000000  00034ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3a23  00000000  00000000  00035e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f989b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000019c  00000000  00000000  000f98ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	080003c0 	.word	0x080003c0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	080003c0 	.word	0x080003c0

08000238 <toggle_led>:
#include "led.h"

void toggle_led(void) {
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
    GPIOJ->ODR ^= LED_PIN;
 800023e:	4b0b      	ldr	r3, [pc, #44]	; (800026c <toggle_led+0x34>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	4a0a      	ldr	r2, [pc, #40]	; (800026c <toggle_led+0x34>)
 8000244:	f083 0320 	eor.w	r3, r3, #32
 8000248:	6153      	str	r3, [r2, #20]
    for (int i = 0; i < 1000000; i++) {} // Delay
 800024a:	2300      	movs	r3, #0
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	e002      	b.n	8000256 <toggle_led+0x1e>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	3301      	adds	r3, #1
 8000254:	607b      	str	r3, [r7, #4]
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	4a05      	ldr	r2, [pc, #20]	; (8000270 <toggle_led+0x38>)
 800025a:	4293      	cmp	r3, r2
 800025c:	ddf8      	ble.n	8000250 <toggle_led+0x18>
}
 800025e:	bf00      	nop
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	40022400 	.word	0x40022400
 8000270:	000f423f 	.word	0x000f423f

08000274 <main>:
#define PIN0		(1U<<0)
#define BTN_PIN		PIN0

uint8_t button_state;

int main() {
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0

	// Push Button B1 is PA0
	// GPIOA is on bus AHB1
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 800027a:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <main+0x64>)
 800027c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027e:	4a16      	ldr	r2, [pc, #88]	; (80002d8 <main+0x64>)
 8000280:	f043 0301 	orr.w	r3, r3, #1
 8000284:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA0 as input pin*/
	GPIOA->MODER &= ~(1U<<0);
 8000286:	4b15      	ldr	r3, [pc, #84]	; (80002dc <main+0x68>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a14      	ldr	r2, [pc, #80]	; (80002dc <main+0x68>)
 800028c:	f023 0301 	bic.w	r3, r3, #1
 8000290:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<1);
 8000292:	4b12      	ldr	r3, [pc, #72]	; (80002dc <main+0x68>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a11      	ldr	r2, [pc, #68]	; (80002dc <main+0x68>)
 8000298:	f023 0302 	bic.w	r3, r3, #2
 800029c:	6013      	str	r3, [r2, #0]

	led_init();
 800029e:	f000 f823 	bl	80002e8 <led_init>
	while(1) {
		/*Check if BTN is pressed*/
		/*push button is active high*/
		if(GPIOA->IDR & BTN_PIN) {
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <main+0x68>)
 80002a4:	691b      	ldr	r3, [r3, #16]
 80002a6:	f003 0301 	and.w	r3, r3, #1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d005      	beq.n	80002ba <main+0x46>
			button_state = 1;
 80002ae:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <main+0x6c>)
 80002b0:	2201      	movs	r2, #1
 80002b2:	701a      	strb	r2, [r3, #0]
			toggle_led();
 80002b4:	f7ff ffc0 	bl	8000238 <toggle_led>
 80002b8:	e002      	b.n	80002c0 <main+0x4c>
		} else {
			button_state = 0;
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <main+0x6c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	701a      	strb	r2, [r3, #0]
		}

		for(int i = 0; i < 90000; i++) {}
 80002c0:	2300      	movs	r3, #0
 80002c2:	607b      	str	r3, [r7, #4]
 80002c4:	e002      	b.n	80002cc <main+0x58>
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	3301      	adds	r3, #1
 80002ca:	607b      	str	r3, [r7, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <main+0x70>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	ddf8      	ble.n	80002c6 <main+0x52>
		if(GPIOA->IDR & BTN_PIN) {
 80002d4:	e7e5      	b.n	80002a2 <main+0x2e>
 80002d6:	bf00      	nop
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40020000 	.word	0x40020000
 80002e0:	2000001c 	.word	0x2000001c
 80002e4:	00015f8f 	.word	0x00015f8f

080002e8 <led_init>:
int __io_putchar(int ch) {
	uart1_write(ch);
	return ch;
}

void led_init(void) {
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
    /* Enable clock access to GPIOJ */
    RCC->AHB1ENR |= GPIOJEN;
 80002ec:	4b0b      	ldr	r3, [pc, #44]	; (800031c <led_init+0x34>)
 80002ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f0:	4a0a      	ldr	r2, [pc, #40]	; (800031c <led_init+0x34>)
 80002f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002f6:	6313      	str	r3, [r2, #48]	; 0x30

    /* Set PJ5 to output mode */
    GPIOJ->MODER |= (1U << 10); // Setting MODER5 to 01 for output mode
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <led_init+0x38>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a08      	ldr	r2, [pc, #32]	; (8000320 <led_init+0x38>)
 80002fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000302:	6013      	str	r3, [r2, #0]
    GPIOJ->MODER &= ~(1U << 11);
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <led_init+0x38>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a05      	ldr	r2, [pc, #20]	; (8000320 <led_init+0x38>)
 800030a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800030e:	6013      	str	r3, [r2, #0]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40023800 	.word	0x40023800
 8000320:	40022400 	.word	0x40022400

08000324 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000324:	480d      	ldr	r0, [pc, #52]	; (800035c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000326:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000328:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800032c:	480c      	ldr	r0, [pc, #48]	; (8000360 <LoopForever+0x6>)
  ldr r1, =_edata
 800032e:	490d      	ldr	r1, [pc, #52]	; (8000364 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000330:	4a0d      	ldr	r2, [pc, #52]	; (8000368 <LoopForever+0xe>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000334:	e002      	b.n	800033c <LoopCopyDataInit>

08000336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033a:	3304      	adds	r3, #4

0800033c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800033c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000340:	d3f9      	bcc.n	8000336 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000342:	4a0a      	ldr	r2, [pc, #40]	; (800036c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000344:	4c0a      	ldr	r4, [pc, #40]	; (8000370 <LoopForever+0x16>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000348:	e001      	b.n	800034e <LoopFillZerobss>

0800034a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800034c:	3204      	adds	r2, #4

0800034e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000350:	d3fb      	bcc.n	800034a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000352:	f000 f811 	bl	8000378 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000356:	f7ff ff8d 	bl	8000274 <main>

0800035a <LoopForever>:

LoopForever:
  b LoopForever
 800035a:	e7fe      	b.n	800035a <LoopForever>
  ldr   r0, =_estack
 800035c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000364:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000368:	080003e0 	.word	0x080003e0
  ldr r2, =_sbss
 800036c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000370:	20000020 	.word	0x20000020

08000374 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000374:	e7fe      	b.n	8000374 <ADC_IRQHandler>
	...

08000378 <__libc_init_array>:
 8000378:	b570      	push	{r4, r5, r6, lr}
 800037a:	4d0d      	ldr	r5, [pc, #52]	; (80003b0 <__libc_init_array+0x38>)
 800037c:	4c0d      	ldr	r4, [pc, #52]	; (80003b4 <__libc_init_array+0x3c>)
 800037e:	1b64      	subs	r4, r4, r5
 8000380:	10a4      	asrs	r4, r4, #2
 8000382:	2600      	movs	r6, #0
 8000384:	42a6      	cmp	r6, r4
 8000386:	d109      	bne.n	800039c <__libc_init_array+0x24>
 8000388:	4d0b      	ldr	r5, [pc, #44]	; (80003b8 <__libc_init_array+0x40>)
 800038a:	4c0c      	ldr	r4, [pc, #48]	; (80003bc <__libc_init_array+0x44>)
 800038c:	f000 f818 	bl	80003c0 <_init>
 8000390:	1b64      	subs	r4, r4, r5
 8000392:	10a4      	asrs	r4, r4, #2
 8000394:	2600      	movs	r6, #0
 8000396:	42a6      	cmp	r6, r4
 8000398:	d105      	bne.n	80003a6 <__libc_init_array+0x2e>
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a0:	4798      	blx	r3
 80003a2:	3601      	adds	r6, #1
 80003a4:	e7ee      	b.n	8000384 <__libc_init_array+0xc>
 80003a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003aa:	4798      	blx	r3
 80003ac:	3601      	adds	r6, #1
 80003ae:	e7f2      	b.n	8000396 <__libc_init_array+0x1e>
 80003b0:	080003d8 	.word	0x080003d8
 80003b4:	080003d8 	.word	0x080003d8
 80003b8:	080003d8 	.word	0x080003d8
 80003bc:	080003dc 	.word	0x080003dc

080003c0 <_init>:
 80003c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c2:	bf00      	nop
 80003c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c6:	bc08      	pop	{r3}
 80003c8:	469e      	mov	lr, r3
 80003ca:	4770      	bx	lr

080003cc <_fini>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	bf00      	nop
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr
